<?php

/**
 * @file
 * Provides an elections candidate entity type.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\localgov_elections\ElectionsContestInterface;
use Drupal\localgov_elections\ElectionsExtraFieldDisplay;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function localgov_elections_theme() {
  return [
    'localgov_elections_candidate' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for elections candidate templates.
 *
 * Default template: localgov-elections-candidate.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the elections candidate information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_localgov_elections_candidate(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}


/**
 * Implements hook_entity_extra_field_info().
 */
function localgov_elections_entity_extra_field_info() {
  return \Drupal::classResolver(ElectionsExtraFieldDisplay::class)
    ->entityExtraFieldInfo();
}

/**
 * @param array $build
 * @param NodeInterface $node
 * @param EntityViewDisplayInterface $display
 * @param $view_mode
 */
function localgov_elections_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  return \Drupal::classResolver(ElectionsExtraFieldDisplay::class)
    ->nodeView($build, $node, $display, $view_mode);
}

function localgov_elections_localgov_elections_contest_view(array &$build, ElectionsContestInterface $contest, EntityViewDisplayInterface $display, $view_mode) {
  return \Drupal::classResolver(ElectionsExtraFieldDisplay::class)
    ->contestView($build, $contest, $display, $view_mode);
}


/**
 * Implements hook_jsonapi_ENTITY_TYPE_filter_access()
 */
function localgov_elections_jsonapi_localgov_elections_contest_filter_access(EntityTypeInterface $entity_type, AccountInterface $account) {
  return [
    JSONAPI_FILTER_AMONG_ALL => AccessResult::allowedIfHasPermission($account, 'view elections contest'),
  ];
}

/**
 * Implements hook_ENTITY_TYPE_delete.
 *
 * Respond to election deleted.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function localgov_elections_node_delete(Drupal\Core\Entity\EntityInterface $entity) {

  if ($entity->bundle() != 'localgov_election') {
    return;
  }

  $contest_ids = \Drupal::entityQuery('localgov_elections_contest')
    ->condition('field_election', $entity->id())
    ->execute();

  $storage = \Drupal::entityTypeManager()->getStorage('localgov_elections_contest');
  $storage->delete($storage->loadMultiple($contest_ids));
}

/**
 * Implements hook_gin_content_form_routes().
 * @return string[]
 */
function localgov_elections_gin_content_form_routes() {
  return [
    'entity.localgov_elections_candidate.edit_form',
    'entity.localgov_elections_contest.edit_form',
    'entity.localgov_elections_contest.add_form',
  ];
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function localgov_elections_form_localgov_elections_contest_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  $form_object = $form_state->getFormObject();

  if ($form_object instanceof EntityForm) {
    $entity = $form_object->getEntity();
    if (!$entity->isNew()) {
      // Hide election / electoral area fields on existing contests.
      $form['field_election']['#access'] = FALSE;
      $form['field_electoral_area']['#access'] = FALSE;
    }
  }

}


/**
 * Implements hook_preprocess_hook
 * @param $vars
 */
function localgov_elections_preprocess_views_view(&$vars) {
  if ($vars['id'] != 'localgov_elections_candidates' || $vars['display_id'] != 'by_party') {
    return;
  }

  // Summary of candidates by party.
  // e.g. 'This party has 21 candidates standing in 19 wards at this election.'

  $view = $vars['view'];

  $wards = [];
  foreach ($view->result as $row) {
    $contest = $row->_relationship_entities['reverse__localgov_elections_contest__field_candidates_1'];
    $contest_id = $contest->id();
    if (isset($wards[$contest_id])) $wards[$contest_id]++;else $wards[$contest_id]=1;
  }

  $vars['header'][]['#markup'] = \Drupal::translation()->formatPlural(count($view->result), 'This party has 1 candidate standing ', 'This party has @count candidates standing ');
  $vars['header'][]['#markup'] = \Drupal::translation()->formatPlural(count($wards), 'in 1 ward at this election', 'in @count wards at this election.');
}

/**
 * Implements hook_preprocess_node().
 *
 * @param $vars
 */
function localgov_elections_preprocess_node(&$vars) {
  if ($vars['node']->getType() != "localgov_election") {
    return;
  }

  $vars['display_makeup'] = (bool) ($vars['node']->get('field_election_display_makeup')->value ?? TRUE);
}

